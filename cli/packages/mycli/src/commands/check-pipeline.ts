var debug = require("debug")("mycli:check-pipeline");

import { Pipelines } from 'gitlab'; // Just the Pipeline Resource
import { flags } from "@oclif/command";
const waitUntil = require('wait-until');
const { prompt } = require("enquirer");

import { cli } from 'cli-ux'

import Base from "../base";

const RETRY_INTERVAL = 5000; // in milliseconds

// modify with condition test
// https://gitlab.com/snippets/1775781
async function retry<T>(
  fn: () => Promise<T>,
  predicate: (arg: T) => boolean = (result: T) => (result as any) === true,
  retriesLeft: number = 10,
  interval: number = RETRY_INTERVAL,
  exponential: boolean = false
): Promise<T> {
  try {
    const val = await fn();
    if (!predicate(val)) {
      throw new Error('this is hacky but will force a retry');
    }

    return val;
  } catch (error) {
    if (retriesLeft) {
      await new Promise(r => setTimeout(r, interval));
      return retry(
        fn,
        predicate,
        retriesLeft - 1,
        exponential ? interval * 2 : interval,
        exponential
      );
    } else throw new Error(`Max retries reached for function ${fn.name}`);
  }
}

// Generated by https://jvilk.com/MakeTypes/
interface Pipeline {
  id: number;
  status: string;
  ref: string;
  sha: string;
  before_sha: string;
  tag: boolean;
  yaml_errors?: null;
  user: User;
  created_at: string;
  updated_at: string;
  started_at?: null;
  finished_at: string;
  committed_at?: null;
  duration?: null;
  coverage: string;
  web_url: string;
}
interface User {
  name: string;
  username: string;
  id: number;
  state: string;
  avatar_url: string;
  web_url: string;
}

const isPipelineDone = (response: Pipeline) => {
  return response.status === 'success';
}


class CheckGitlabPipeline extends Base {
  static description = "Waits until a gitlab pipeline completes, then notifies you";

  static flags = {
    // add --version flag to show CLI version
    version: flags.version({ char: "v" }),
    help: flags.help({ char: "h" }),
    // flag with a value (-n, --name=VALUE)
    pipelineId: flags.integer({
      char: "p",
      description: "pipeline id",
      default: 1796026
    }),
    // flag with no value (-f, --force)
    // force: flags.string({ char: "f" })
    token: flags.string({
      char: "g",
      env: "GITLAB_TOKEN",
      required: true
    }),
    host: flags.string({
      char: "o",
      default: 'https://gitlab.ddbuild.io'
    })
    // url
  };

  static strict = false;
  async run() {
    const { flags } = this.parse(CheckGitlabPipeline);

    const { token, host } = flags;

    const gitlabApiOptions = {
      token: token,
      host: host
    };

    const api = new Pipelines(gitlabApiOptions);
    const pipelineId = flags.pipelineId;
    const projectId = 'DataDog/web-ui'; // PS: how to get this? generically.

    const checkApiStatusPromise = () => {
      return api.show(projectId, pipelineId).then((response: any) => {
        return (response as Pipeline);
      });
    }


    cli.action.start(`Checking pipeline ${pipelineId}`, 'waiting');
    await retry(checkApiStatusPromise, isPipelineDone)
      .then((response: Pipeline) => {
        cli.action.stop('Succeeded! Visit URL for more details') // shows 'starting a process... done'
        // optionally open URL, we can prompt user to see what they like
        this.log(response.web_url)
      })
      .catch(()=> {
        cli.action.stop('giving up') // shows 'starting a process... done'
      });
  }
}

export = CheckGitlabPipeline;

//
// Enter a loop until
// Gitlab OpenAPI:
// https://gitlab.com/gitlab-org/gitlab/blob/master/doc/api/pipelines.md
// await waitUntil()
//   .interval(500)
//   .times(10)
//   .condition(async (cb: any) => {
//     this.log('trying');

//   })
//   .done((result: any) => {
//     this.log("condition was met");
//   });
// this.log("condition was not met");


// api.show(projectId, pipelineId).then((response) => {
//   this.log(`${(response as any).status}`);
//   return
// })
// .finally(() =>
//   console.log("You can specify this with the --name flag in future")
// );

// TODO: add a timeout if it takes forever
// this.log(`hello pipeline ${name} from ./src/index.ts ${gitlabToken}`);
