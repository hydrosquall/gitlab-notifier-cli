// var debug = require("debug")("mycli:check-pipeline");
import { flags } from '@oclif/command';
import { cli } from 'cli-ux';
import { Pipelines } from 'gitlab';
import chalk from 'chalk';

import { parse }  from 'url';

import Base from '../base';

const { prompt } = require("enquirer");

const RETRY_INTERVAL = 6000; // in milliseconds
const RETRY_COUNT = 10;

// modify with condition test
// https://gitlab.com/snippets/1775781
async function retry<T>(
  fn: () => Promise<T>,
  predicate: (arg: T) => boolean = (result: T) => (result as any) === true,
  retriesLeft: number = RETRY_COUNT,
  interval: number = RETRY_INTERVAL,
  exponential: boolean = false
): Promise<T> {
  try {
    const val = await fn();
    if (!predicate(val)) {
      throw new Error('this is hacky but will force a retry');
    }

    return val;
  } catch (error) {
    if (retriesLeft) {
      await new Promise(r => setTimeout(r, interval));
      return retry(
        fn,
        predicate,
        retriesLeft - 1,
        exponential ? interval * 2 : interval,
        exponential
      );
    } else throw new Error(`Max retries reached for function ${fn.name}`);
  }
}

// Generated by https://jvilk.com/MakeTypes/
interface Pipeline {
  id: number;
  status: string;
  ref: string;
  sha: string;
  before_sha: string;
  tag: boolean;
  yaml_errors?: null;
  user: User;
  created_at: string;
  updated_at: string;
  started_at?: null;
  finished_at: string;
  committed_at?: null;
  duration?: null;
  coverage: string;
  web_url: string;
}
interface User {
  name: string;
  username: string;
  id: number;
  state: string;
  avatar_url: string;
  web_url: string;
}

const isPipelineDone = (response: Pipeline) => {
  return response.status === 'success';
}

const apiVersionFromString = (apiVersion: string): 4 | 3 => {
  switch (apiVersion) {
    case '4':
      return 4;
    case '3':
      return 3;
    default:
      return 4;
  }
}


class CheckGitlabPipeline extends Base {
  static description = "Waits until a gitlab pipeline completes, then notifies you";

  static flags = {
    // add --version flag to show CLI version
    version: flags.version({ char: "v" }),
    help: flags.help({ char: "h" }),
    // flag with a value (-n, --name=VALUE)
    pipelineId: flags.integer({
      char: "p",
      description: "pipeline id",
      default: 1796026
    }),
    // flag with no value (-f, --force)
    // force: flags.string({ char: "f" })
    // https://www.npmjs.com/package/gitlab#getting-started
    token: flags.string({
      char: "g",
      env: "GITLAB_TOKEN",
      required: true
    }),
    host: flags.string({
      char: "o",
      default: 'https://gitlab.ddbuild.io'
    }),
    apiVersion: flags.string({
      char: "a",
      default: '4',
      options: ['3', '4']
    }),
    url: flags.string({
      char: "u",
      // required: true, // TODO: write this
      default: 'https://gitlab.ddbuild.io/DataDog/web-ui/pipelines/1796026'
    })
  };

  static args = [{ name: "url" }];

  static strict = false;
  async run() {
    const { flags, args } = this.parse(CheckGitlabPipeline);

    const { token, apiVersion } = flags;
    const { url } = args;

    // parse URL into host, projectId, pipelineId
    const parsedUrl = parse(url);
    const { host, protocol } = parsedUrl;

    const gitlabApiOptions = {
      token: token,
      host: `${protocol}//${host}` || '',
      version: apiVersionFromString(apiVersion)
    };

    // TODO: this part depends on how the gitlab api version works, we assume v4.
    const parsedPath = parsedUrl.pathname?.split('/pipelines/');

     // // https://docs.gitlab.com/ee/api/README.html#namespaced-path-encoding
    const projectId = parsedPath?.slice(0, 1)[0]|| 'Datadog/web-ui';
    const pipelineId = parsedPath?.slice(1, 2)[0] || 1000;

    const api = new Pipelines(gitlabApiOptions);

    const checkApiStatusPromise = () => {
      return api.show(projectId, +pipelineId).then((response: any) => {
        return (response as Pipeline);
      });
    }


    // Actual meat-and-potatoes
    this.log("Hi there! I'll let you know when this gitlab work is done");
    cli.action.start(`Checking pipeline ${chalk.cyan(`${pipelineId}`)}`, `Thinking intently...`);

    // https://github.com/sw-yx/egghead-cli-workshop/blob/master/guide/12-polish-CLI.md
    await retry(checkApiStatusPromise, isPipelineDone)
      .then((response: Pipeline) => {
        cli.action.stop(chalk.green('Succeeded! Visit URL for more details')) // shows 'starting a process... done'
        // optionally open URL, we can prompt user to see what they like
        this.log(response.web_url)
      })
      .catch(()=> {
        cli.action.stop(chalk.red(`Retired after ${RETRY_COUNT * RETRY_INTERVAL / 1000} seconds. Try again later`));
      });
  }
}

export = CheckGitlabPipeline;
